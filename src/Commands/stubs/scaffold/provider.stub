<?php

namespace $NAMESPACE$;

use Config;
use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class $CLASS$ extends ServiceProvider
{
    public function boot(): void
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->registerFactories();
        $this->loadMigrationsFrom(__DIR__ . '/../$MIGRATIONS_PATH$');
    }

    public function register(): void
    {
        $this->app->register(RouteServiceProvider::class);
    }

    public function provides(): array
    {
        return [];
    }

    private function registerConfig(): void
    {
        $this->publishes([
            __DIR__ . '/../$PATH_CONFIG$/config.php' => config_path('$LOWER_NAME$.php')
        ], 'config');

        $this->mergeConfigFrom(
            __DIR__ . '/../$PATH_CONFIG$/config.php', '$LOWER_NAME$'
        );
    }

    private function registerFactories(): void
    {
        if (! $this->app->environment('production') && $this->app->runningInConsole()) {
            app(Factory::class)->load(__DIR__ . '/../$FACTORIES_PATH$');
        }
    }

    private function registerTranslations(): void
    {
        $langPath = resource_path('lang/modules/$LOWER_NAME$');

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, '$LOWER_NAME$');
        } else {
            $this->loadTranslationsFrom(__DIR__  .'/../$PATH_LANG$', '$LOWER_NAME$');
        }
    }

    private function registerViews(): void
    {
        $viewPath = resource_path('views/modules/$LOWER_NAME$');

        $sourcePath = __DIR__ . '/../$PATH_VIEWS$';

        $this->publishes([
            $sourcePath => $viewPath
        ], 'views');

        $this->loadViewsFrom(array_merge(array_map(static function ($path) {
            return "{$path}/modules/$LOWER_NAME$";
        }, Config::get('view.paths')), [$sourcePath]), '$LOWER_NAME$');
    }
}
